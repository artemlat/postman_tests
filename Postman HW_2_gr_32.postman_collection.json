{
	"info": {
		"_postman_id": "686aa1da-7d27-4e0a-afc4-e524b9f0cb78",
		"name": "Postman HW_2_gr_32",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16645036"
	},
	"item": [
		{
			"name": "EP_first/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"В body приходит правильный string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"}); // 3. Проверить, что в body приходит правильный string.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"var parsed_resp = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var parsed_resp_name = parsed_resp.name;\r",
							"var parsed_resp_age = +parsed_resp.age;\r",
							"var parsed_req = request.data; // 7. Спарсить request.\r",
							"var parsed_req_name = request.data.name;\r",
							"var parsed_req_age = +request.data.age;\r",
							"var parsed_resp_salary = parsed_resp.salary;\r",
							"var parsed_req_salary = +request.data.salary;\r",
							"var parsed_resp_u_salary_1_5_year = parsed_resp.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Name в ответе равно name из request\", function () {\r",
							"    pm.expect(parsed_resp_name).to.eql(\"Artiom\");\r",
							"}); // 4. Проверить, что name в ответе равно name из request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Age в ответе равно age из request\", function () {\r",
							"    pm.expect(parsed_resp_age).to.eql(25);\r",
							"}); // 5. Проверить, что age в ответе равно age из request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Salary в ответе равно salary из request\", function () {\r",
							"    pm.expect(parsed_resp_salary).to.eql(2000);\r",
							"}); // 6. Проверить, что salary в ответе равно salary из request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Name в ответе равно name из request\", function () {\r",
							"    pm.expect(parsed_resp_name).to.eql(parsed_req_name);\r",
							"}); // 8. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Age в ответе равно age из request\", function () {\r",
							"    pm.expect(parsed_resp_age).to.eql(parsed_req_age);\r",
							"}); // 9. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Salary в ответе равно salary из request\", function () {\r",
							"    pm.expect(parsed_resp_salary).to.eql(parsed_req_salary);\r",
							"}); // 10. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"\r",
							"console.log(parsed_resp.family) // 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4 (salary забрать из request.)\", function () {\r",
							"    pm.expect(parsed_resp_u_salary_1_5_year).to.eql(parsed_req_salary*4);\r",
							"}); //  12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Artiom",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_resp = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var parsed_req = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var parsed_resp_name = parsed_resp.name\r",
							"var parsed_req_name = parsed_req.name\r",
							"var parsed_resp_age = parsed_resp.age\r",
							"var parsed_req_age = parsed_req.age\r",
							"var parsed_resp_salary = parsed_resp.salary\r",
							"var parsed_req_salary = +parsed_req.salary\r",
							"var dog = parsed_resp.family.pets.dog\r",
							"var dogs_name = parsed_resp.family.pets.dog.name\r",
							"var dogs_age = parsed_resp.family.pets.dog.age\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Name в ответе равно name из request\", function () {\r",
							"    pm.expect(parsed_resp_name).to.eql(parsed_req_name);\r",
							"}); // 5. Проверить, что name в ответе равно name из request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Age в ответе равно age из request\", function () {\r",
							"    pm.expect(parsed_resp_age).to.eql(parsed_req_age);\r",
							"}); // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Salary в ответе равно salary из request\", function () {\r",
							"    pm.expect(parsed_resp_salary).to.eql(parsed_req_salary);\r",
							"}); // 7. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"\r",
							"console.log(parsed_resp.family) // 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test(\"У параметра dog есть параметр name\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\");\r",
							"}); // 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"У параметра dog есть параметр age\", function () {\r",
							"    pm.expect(dog).to.have.property(\"age\");\r",
							"}); // 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"\r",
							"pm.test(\"Параметр name имеет значение Luky\", function () {\r",
							"    pm.expect(dogs_name).to.have.eql(\"Luky\");\r",
							"}); // 11. Проверить, что параметр name имеет значение Luky.\r",
							" \r",
							"pm.test(\"Параметр age имеет значение 4\", function () {\r",
							"    pm.expect(dogs_age).to.have.eql(4);\r",
							"}); // 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Artiom&age=25&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_resp = pm.response.json(); // 3. Спарсить response body в json.\r",
							"var parsed_req = pm.request.url.query.toObject() // 4. Спарсить request.\r",
							"var parsed_resp_name = parsed_resp.name\r",
							"var parsed_req_name = parsed_req.name\r",
							"var parsed_resp_age = parsed_resp.age\r",
							"var parsed_req_age = +parsed_req.age\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 2. Статус код 200\r",
							"\r",
							"pm.test(\"Name в ответе равно name c request\", function () {\r",
							"    pm.expect(parsed_resp_name).to.eql(parsed_req_name);\r",
							"}); // 5. Проверить, что name в ответе равно name c request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Age в ответе равно age из request\", function () {\r",
							"    pm.expect(parsed_resp_age).to.eql(parsed_req_age);\r",
							"}); // 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"console.log(\"Salary from request: \" + parsed_req.salary) // 7.Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from response: \" + parsed_resp.salary) // 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Zero element salary from response: \" + parsed_resp.salary[0]) // 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"First element salary from response: \" + parsed_resp.salary[1]) // 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"console.log(\"Second element salary from response: \" + parsed_resp.salary[2]) // 11. Вывести в консоль 2-й элемент параметра salary из response.\r",
							"\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"    pm.expect(parsed_resp.salary[0]).to.eql(+parsed_req.salary);\r",
							"}); // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 из request\", function () {\r",
							"    pm.expect(+parsed_resp.salary[1]).to.eql(+parsed_req.salary*2);\r",
							"}); // 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3 из request\", function () {\r",
							"    pm.expect(+parsed_resp.salary[2]).to.eql(+parsed_req.salary*3);\r",
							"}); // 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.environment.set(\"name\", parsed_req_name); // 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"age\", parsed_req_age); // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"salary\", parsed_req.salary); // 20. Передать в окружение переменную salary\r",
							"\r",
							"for (key in parsed_resp.salary) {\r",
							"    console.log(parsed_resp.salary[key])\r",
							"} // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Artiom&age=25&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Artiom"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var parsed_resp = pm.response.json(); // 6. Спарсить response body в json.\r",
							"var parsed_req = request.data // 7. Спарсить request.\r",
							"\r",
							"\r",
							"pm.test(\"Статус код 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"}); // 5. Статус код 200\r",
							"\r",
							"pm.test(\"json response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"start_qa_salary\");\r",
							"}); // 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"}); // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"}); // 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"}); // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"}); // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"json response имеет параметр person\", function () {\r",
							"    pm.expect(parsed_resp).to.have.property(\"person\");\r",
							"}); // 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(parsed_resp.start_qa_salary).to.eql(+parsed_req.salary);\r",
							"}); // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(parsed_resp[\"qa_salary_after_6_months\"]).to.eql(+parsed_req.salary * 2);\r",
							"}); // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(parsed_resp.qa_salary_after_12_months).to.eql(+parsed_req.salary * 2.7);\r",
							"}); // 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(parsed_resp[\"qa_salary_after_1.5_year\"]).to.eql(+parsed_req.salary * 3.3);\r",
							"}); // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8 из request\", function () {\r",
							"    pm.expect(parsed_resp[\"qa_salary_after_3.5_years\"]).to.eql(+parsed_req.salary * 3.8);\r",
							"}); // 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(parsed_resp.person.u_name[1]).to.eql(+parsed_req.salary);\r",
							"}); // 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Параметр u_age равен age из request\", function () {\r",
							"    pm.expect(parsed_resp.person.u_age).to.eql(+parsed_req.age);\r",
							"}); // 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(parsed_resp.person.u_salary_5_years).to.eql(+parsed_req.salary * 4.2);\r",
							"}); // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"Object.keys(parsed_resp.person).forEach(key=>{\r",
							"    console.log(parsed_resp.person[key])\r",
							"}) // 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "artiom",
							"disabled": true
						},
						{
							"key": "age",
							"value": "44",
							"disabled": true
						},
						{
							"key": "salary ",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}